@page "/manageUsers/{Username}"
@using LedgrLogic
@using MudBlazor
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager

<PageTitle>Home</PageTitle>

<link rel="stylesheet" href="home.css" />
<link rel="stylesheet" href="/dashboard.css">


<!-- HEADER -->
<header class="app-header">
    <div class="app-header__top">
        <div class="brand">
            <img src="/logo-slogan.png" alt="LEDGR Logo" class="brand__logo" />
        </div>

        <div class="user">
            <button id="userMenuBtn" class="user__btn" aria-haspopup="menu" aria-expanded="false">
                <svg class="icon icon--user" viewBox="0 0 24 24" aria-hidden="true">
                    <path d="M12 12a5 5 0 1 0-5-5 5 5 0 0 0 5 5Zm0 2c-4.418 0-8 2.239-8 5v1h16v-1c0-2.761-3.582-5-8-5Z"/>
                </svg>
                <span class="user__name">Admin</span>
                <svg class="icon icon--caret" viewBox="0 0 24 24" aria-hidden="true"><path d="M7 10l5 5 5-5H7z"/></svg>
            </button>

            <div id="userMenu" class="menu" role="menu" aria-labelledby="userMenuBtn">
                <button @onclick="LogOut" class="menu__item" role="menuitem">
                    <svg class="icon" viewBox="0 0 24 24" aria-hidden="true">
                        <path d="M10 17l1.41-1.41L8.83 13H21v-2H8.83l2.58-2.59L10 7l-5 5 5 5zM4 19h6v2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h6v2H4v14z"/>
                    </svg>
                    Log out
                </button>
            </div>
        </div>
    </div>

    <nav class="app-nav" aria-label="Primary">
        <div class="app-nav__inner">
            <ul class="app-nav__list">
                <li><a @onclick="Home" class="app-nav__link is-active" href="#">Dashboard</a></li>
                <li><a @onclick="CoAList" class="app-nav__link" href="#">Chart of Accounts</a></li>
                <li><a class="app-nav__link" href="ledger.html">Ledger</a></li>
                <li><a @onclick="CoAEventLog" class="app-nav__link" href="#">Event Log</a></li>
                <li><a class="app-nav__link" href="journal.html">Journal</a></li>
            </ul>
        </div>
    </nav>
</header>

<SideBar>
    <button @onclick="Home" type="button" class="btn-nav" style="background-color: #1e1e2f; color: #FFFFFF; border: none">Dashboard</button>
    <button @onclick="CoAList" type="button" class="btn-nav" style="background-color: #1e1e2f; color: #FFFFFF; border: none">Chart of Accounts List</button>
    <button @onclick="CoAForm" type="button" class="btn-nav" style="background-color: #1e1e2f; color: #FFFFFF; border: none" >Chart of Accounts Form</button>
    <button @onclick="CoAEventLog" type="button" class="btn-nav" style="background-color: #1e1e2f; color: #FFFFFF; border: none" >Chart of Accounts Event Log</button>
    @if (Role == "Admin")
    {
    <button @onclick="ManageUser" type="button" class="btn-nav" style="background-color: #1e1e2f; color: #FFFFFF; border: none">Manage Users</button>
    <button @onclick="PasswordReport" type="button" class="btn-nav" style="background-color: #1e1e2f; color: #FFFFFF; border: none">Password Report</button>
    }
</SideBar>

<!-- DATE DROPDOWN BOX -->
<div class="toolbar">
    <button id="dateBtn" class="date-btn" aria-haspopup="dialog" aria-expanded="false">
        <svg class="icon icon--calendar" viewBox="0 0 24 24" aria-hidden="true">
            <path d="M7 2v2H5a2 2 0 0 0-2 2v2h18V6a2 2 0 0 0-2-2h-2V2h-2v2H9V2H7Zm14 8H3v10a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V10Zm-14 4h6v4H7v-4Z"/>
        </svg>
        <span id="dateText">October 16th, 2025</span>
    </button>
    <input id="dateInput" type="date" class="visually-hidden">
</div>

<!-- CALENDAR -->
<div id="calendarPopover" class="cal" role="dialog" aria-modal="true" aria-labelledby="calLabel" hidden>
    <div class="cal__inner">
        <div class="cal__header">
            <button class="cal__nav" data-dir="-1" aria-label="Previous month">‹</button>
            <div id="calLabel" class="cal__label">October 2025</div>
            <button class="cal__nav" data-dir="1" aria-label="Next month">›</button>
        </div>
        <div class="cal__grid cal__dow">
            <span>Su</span><span>Mo</span><span>Tu</span><span>We</span><span>Th</span><span>Fr</span><span>Sa</span>
        </div>
        <div id="calGrid" class="cal__grid"></div>
    </div>
</div>

<div class="homeDisplay">
    <div class="homeRow" style="display: flex; justify-content: flex-end">
        <!--<button @onclick="OpenReport" type="button" class="btn btn-primary reportButton">PW Report</button>-->
        <div class="logged-in-data">
            <p><strong>@Username</strong></p>
            <img src="profile.png" alt="PFP" class="pfp"/>
        </div>
    </div>

    <div>
        <!-- Existing Users Table -->
        <div class="homeUserContainer">
            <h3 class="tableHeader">User Data</h3>
            <!-- <button @onclick="CreateUser" type="button" class="btn btn-primary createUser">Create User +</button> -->    
        </div>
        <table class="user-table">
            <thead>
            <tr>
                <th>UserID</th>
                <th>Username</th>
                <th>Email</th>
                <!--<th>Active?</th>-->
                <th>EmployeeID</th>
                <th></th>
                <th>Actions</th>
            </tr>
            @for (int i = 0; i < users.Count; i += 7)
            {
                int index = i;
                <tr>
                    <td style="width: 100px">@users[index]</td>
                    <td style="width: 300px">@users[index + 1]</td>
                    <td style="width: 400px">
                        <MudButton class="btn-email" OnClick="() => OpenDialog(index)">
                            @users[index + 3]
                        </MudButton>
                    </td>
                    <!--<td style="width: 100px">@users[index + 5]</td>-->
                    <td style="width: 150px">@users[index + 6]</td>
                    @if (users[index + 5] == "1")
                    {
                        <td style="width: 100px"><button @onclick="@(() => SuspendUser(index))" class="suspend btn">Suspend</button></td>
                    }
                    @if (users[index + 5] == "0")
                    {
                        <td style="width: 100px"><button @onclick="(() => ActivateUser(index))" class="activate btn">Activate</button></td>
                    }
                    <td style="width: 100px"><button @onclick="(() => EditUser(index))" class="edit btn">Edit</button></td>
                </tr>
            }
            </thead>
        </table>

        <!-- Pending Users Table -->
        <h3 class="tableHeader">Pending Users</h3>
        <table class="pendingUsers-table">
            <thead>
            <tr>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Email</th>
                <th>Date of Birth</th>
                <th>Address</th>
                <th></th>
                <th>Actions</th>
            </tr>
            @for (int i = 0; i < potentialUsers.Count; i += 12)
            {
                int index = i;
                int id = int.Parse(potentialUsers[index]);
                <tr>
                    <td style="width: 150px;">@potentialUsers[index + 6]</td>
                    <td style="width: 150px">@potentialUsers[index + 7]</td>
                    <td style="width: 300px">@potentialUsers[index + 3]</td>
                    <td style="width: 200px">@potentialUsers[index + 8]</td>
                    <td style="width: 200px">@potentialUsers[index + 9]</td>
                    <td style="width: 200px">
                        <button @onclick="@(() => RejectUserCommand(id))" type="button" class="btn suspend">Reject</button>
                    </td><td>
                        <button onclick="@(() => AcceptUser(id))" type="button" class="btn activate">Confirm</button>
                    </td>
                </tr>
            }
            </thead>
        </table>

        <!-- Dialog -->
        <EmailDialog Show="@showEmailDialog" ShowChanged="val => showEmailDialog = val" Recipient="@selectedRecipient"/>
        <PasswordReport ShowReport="@showPWR" ShowChanged="val => showPWR = val"></PasswordReport>
        <CreateUserDialog Show="@showCU" ShowChanged="val => showCU = val"></CreateUserDialog>
        <SuspendUserDialog Show="@showSU" ShowChanged="val => showSU = val" Username = "@SuspendUsername" OnUserSuspended="@HandleUserSuspended"></SuspendUserDialog>
        <ActivateUserDialog Show="@showAU" ShowChanged="val => showAU = val" UserID="@activateUserID" OnUserActivated="@HandleUserActivated"></ActivateUserDialog>
    </div>
    <script src="/dashboard.js"></script>
</div>



@code {
    [Parameter] public string? Username { get; set; } = string.Empty;
    public string Role { get; set; } = string.Empty;

    List<string> users = Admin.GetAllUsers().Result;
    List<string> potentialUsers = Admin.GetAllPotentialUsers().Result;

    private bool showEmailDialog = false;
    private bool showPWR = false;
    private bool showCU = false;
    private bool showSU = false;
    private bool showAU = false;
    private string? SuspendUsername;
    private string? selectedRecipient;
    private int activateUserID;

    protected override async Task OnParametersSetAsync()
    {
        Role = (await Admin.GetUserFromUserName(Username)).GetRole();
    }

    private void OpenDialog(int index)
    {
        selectedRecipient = users[index + 3];
        showEmailDialog = true;
    }

    private void OpenReport()
    {
        showPWR = true;
    }

    private void CreateUser()
    {
        showCU = true;
    }

    private async Task EditUser(int index)
    {
        string targetUsername = users[index + 1];
        NavigationManager.NavigateTo($"/editUser/{Username}/{targetUsername}");
    }

    private async Task RejectUserCommand(int id)
    {
        await User.RejectUser(id);
        potentialUsers = await Admin.GetAllPotentialUsers();
        StateHasChanged();
    }

    private async Task AcceptUser(int id)
    {
        await Admin.ApproveUser(id);
        potentialUsers = await Admin.GetAllPotentialUsers();
        users = await Admin.GetAllUsers();
        StateHasChanged();
    }

    private async Task SuspendUser(int indexModifier)
    {
        SuspendUsername = users[indexModifier + 1];
        showSU = true;
    }
    
    private void HandleUserSuspended(string username)
    {
        int index = -1;
        for (int i = 0; i < users.Count; i++)
        {
            if (users[i] == username)
            {
                // Set equal to row num
                index = i - 1;
                break;
            }
        }
        
        if (index >= 0)
        {
            users[index + 5] = "0";
            StateHasChanged();
        }
    }

    private async Task ActivateUser(int index)
    {
        activateUserID = Convert.ToInt32(users[index]);
        showAU = true;
    }

    private void HandleUserActivated(string userID)
    {
        int index = -1;
        for (int i = 0; i < users.Count; i++)
        {
            if (users[i] == userID)
            {
                // Set equal to row num
                index = i;
                break;
            }
        }

        if (index >= 0)
        {
            users[index + 5] = "1";
        }
    }
    
    // Nav Buttons - Linked to side bar
    public void Home()
    {
        NavigationManager.NavigateTo($"/dashboard/{Username}");
    }
    public void CoAList()
    {
        NavigationManager.NavigateTo($"/CoAList/{Username}");
    }
    
    public void CoAForm()
    {
        NavigationManager.NavigateTo($"/CoAForm/{Username}");
    }
    public void CoAEventLog()
    {
        NavigationManager.NavigateTo($"/CoAEventLog/{Username}");
    }

    public void ManageUser()
    {
        NavigationManager.NavigateTo($"/manageUsers/{Username}");
    }
    public void PasswordReport()
    {
        NavigationManager.NavigateTo($"/pwReport/{Username}");
    }
    public void LogOut()
    {
        NavigationManager.NavigateTo("/");
    }
}