@page "/cUser"
@using LedgrLogic
@inject NavigationManager NavigationManager

<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Create New User</title>

  <!-- Free fonts -->
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&family=Oswald:wght@400;600;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="/styles.css" />
</head>
<body class="page page--login"><!-- reuse header style like Figma -->

  <!-- Header band w/ centered logo -->
  <header class="site-header">
    <div class="container header-inner">
      <img src="/logo-slogan.png" alt="LEDGR — The smart way to balance business" class="brand-logo" />
    </div>
  </header>
  <NavLink class="link" href="/" aria-label="Return to previous page">← Return to Previous Page</NavLink>
  <main class="container container-center">
    <section class="cardCreateUser" aria-labelledby="createTitle">

      <h1 id="createTitle" class="h2">Create a New User</h1>
      <p class="body1 muted" style="margin-top:0;">Please provide the following information</p>

      <!-- Inline alert placeholder -->
      <div id="createAlert" class="alert is-hidden" role="alert" aria-live="polite">
        <span class="alert__dot" aria-hidden="true"></span>
        <span class="alert__text" id="createAlertText"></span>
      </div>

      <form id="createForm" class="form" novalidate>
        <!-- First Name -->
        <label class="field">
          <span class="field__label">First Name</span>
          <InputText @bind-Value="FirstName" id="firstName" name="firstName" type="text" class="input" placeholder="John" required />
        </label>

        <!-- Last Name -->
        <label class="field">
          <span class="field__label">Last Name</span>
          <InputText @bind-Value="LastName" id="lastName" name="lastName" type="text" class="input" placeholder="Doe" required />
        </label>

        <!-- Password -->
        <label class="field">
          <span class="field__label">Password</span>
          <InputText @bind-Value="Password" id="password" name="password" type="text" class="input" placeholder="PW" required />
        </label>

        <!-- Email Address -->
        <label class="field">
          <span class="field__label">Email Address</span>
          <InputText @bind-Value="EmailAddress" id="email" name="email" type="email" class="input" placeholder="email@ledgr.com" autocomplete="email" required />
        </label>

        <!-- DOB (MM/DD/YYYY only) -->
        <label class="field">
          <span class="field__label">Date of Birth</span>
          <InputText
            @bind-Value="DOB"
            id="dob"
            name="dob"
            type="text"
            class="input"
            inputmode="numeric"
            placeholder="MM/DD/YYYY"
            aria-describedby="dobHint"
            maxlength="10"
            required
          />
          <p id="dobHint" class="caption muted">Format: MM/DD/YYYY</p>
        </label>

        <!-- Address -->
        <label class="field">
          <span class="field__label">Address</span>
          <InputText @bind-Value="Address" id="address" name="address" class="input" placeholder="Home Address" required />
        </label>

        <!-- Role [REDACTED]
        <label class="field">
          <span class="field__label">Role</span>
          <select id="role" name="role" class="input">
            <option value="Admin">Admin</option>
            <option value="Manager">Manager</option>
            <option value="Accountant" selected>Accountant</option>
          </select>
        </label>
        -->

        <!-- Status - [REDACTED]
        <label class="field">
          <span class="field__label">Status</span>
          <select id="status" name="status" class="input">
            <option value="Active">Active</option>
            <option value="Inactive" selected>Inactive</option>
          </select>
        </label>
        -->

        <!-- Auto-generated username (read-only preview) -->
        <label class="field">
          <span class="field__label">Auto-Generated Username</span>
          <InputText @bind-Value="Username" id="username" name="username" type="text" class="input" placeholder="jdoe1025" readonly />
          <p class="caption muted">
            Rule: first initial + last name + <code>MMyy</code> of date registered
            (eg. jdoe0101)
          </p>
          <button @onclick="UpdateUsername" type="button" class="btn btn-secondary" id="updateUsername">Generate</button>

        </label>

        <!-- Actions -->
        <div class="actions">
          <button type="button" class="btn btn-secondary" id="btnClearCreate">Clear</button>
          <button @onclick="VerifyUserData" type="button" class="btn btn-primary">Submit</button>
        </div>

        <p class="center" style="margin-top:8px;"><span class="muted">Already have an account? </span>
          <NavLink class="link" href="/">
            Sign in
          </NavLink>
        </p>
      </form>
    </section>
  </main>

</body>
</html>

@code {
  public string FirstName { get; set; } = string.Empty;
  public string LastName { get; set; } = string.Empty;
  public string EmailAddress { get; set; } = string.Empty;
  public string DOB { get; set; } = string.Empty;
  public string Address { get; set; } = string.Empty;
  public string Password { get; set; } = string.Empty;

  public string Username { get; set; } = "jdoe0101";
  
  public string Date = DateTime.Today.ToString("yyyy-MM-dd");
  public string FormattedDate = string.Empty;

  public void UpdateUsername()
  {
    if (FirstName != string.Empty)
    {
      if (LastName != string.Empty)
      {
        FormattedDate += Convert.ToString(Date[5]);
        FormattedDate += Convert.ToString(Date[6]);
        FormattedDate += Convert.ToString(Date[8]);
        FormattedDate += Convert.ToString(Date[9]);

        Console.WriteLine($"{Date[5]} , {Date[6]} , {Date[8]} , {Date[9]}");
        Console.WriteLine(FormattedDate);
        Username = FirstName[0] + LastName + FormattedDate;
      }
    }
  }

  public async Task VerifyUserData()
  {
    // Debug
    string userName = FirstName[0] + LastName + Convert.ToString(Date[5]) + Convert.ToString(Date[6]) + Convert.ToString(Date[8]) + Convert.ToString(Date[9]);
    
    // Create input validation before proceeding
    
    if (User.CreatePotentialUser(userName, Password, EmailAddress, FirstName, LastName, DOB, Address))
    {
      NavigationManager.NavigateTo($"/");
    }
    else
    {
      
    }
    
    // Function currently dne - need to take data from this function and verify against requirements; success would create a row in the database where "isActive" is 0
    
  }


}