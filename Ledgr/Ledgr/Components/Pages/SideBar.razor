<style>
    .hamburger {
        color: #FFFFFF;
        position: absolute;
        top: 1rem;
        left: 1rem;
        font-size: 1.8rem;
        background: none;
        border: none;
        cursor: pointer;
        z-index: 1001;
    }

    /* Sidebar */
    .sidebar {
        position: fixed;
        top: 0;
        left: 0;
        width: 250px;
        height: 100%;
        background-color: #1e1e2f;
        color: white;
        transform: translateX(-100%);
        transition: transform 0.3s ease-in-out;
        z-index: 1000;
        padding-top: 60px;
    }

    .sidebar.open {
        transform: translateX(0);
    }

    .close-btn-side {
        position: absolute;
        top: 1rem;
        right: 1rem;
        background: none;
        border: none;
        color: white;
        font-size: 1.5rem;
        cursor: pointer;
    }

    .nav-links {
        display: flex;
        flex-direction: column;
        padding: 1rem;
    }

    .nav-links a {
        color: white;
        text-decoration: none;
        padding: 0.75rem 0;
        font-size: 1.1rem;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

    .nav-links a:hover {
        background-color: rgba(255, 255, 255, 0.1);
    }

    .page-content {
        padding: 2rem;
        transition: filter 0.3s ease;
    }

    /* Optional dim background when sidebar open */
    .sidebar.open ~ .page-content {
        filter: brightness(0.8);
    }

</style>

<div>
    @if (!isNavOpen)
    {
        <button class="hamburger" @onclick="ToggleNav">â˜°</button>
    }

    <div class="sidebar @(isNavOpen ? "open" : "")">
        <button class="close-btn-side" @onclick="ToggleNav">&times;</button>
        <nav class="nav-links">
            @ChildContent
        </nav>
    </div>
</div>

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    private bool isNavOpen;

    private void ToggleNav()
    {
        isNavOpen = !isNavOpen;
    }

}